#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <machine/pcb.h>
#include <machine/spl.h>
#include <machine/trapframe.h>
#include <kern/callno.h>
#include <syscall.h>
#include <thread.h>
#include <curthread.h>



int md_fork_entry = 1;//to chceck how many times md_fork_entry is called

/*
 * System call handler.
 *
 * A pointer to the trapframe created during exception entry (in
 * exception.S) is passed in.
 *
 * The calling conventions for syscalls are as follows: Like ordinary
 * function calls, the first 4 32-bit arguments are passed in the 4
 * argument registers a0-a3. In addition, the system call number is
 * passed in the v0 register.
 *
 * On successful return, the return value is passed back in the v0
 * register, like an ordinary function call, and the a3 register is
 * also set to 0 to indicate success.
 *
 * On an error return, the error code is passed back in the v0
 * register, and the a3 register is set to 1 to indicate failure.
 * (Userlevel code takes care of storing the error code in errno and
 * returning the value -1 from the actual userlevel syscall function.
 * See src/lib/libc/syscalls.S and related files.)
 *
 * Upon syscall return the program counter stored in the trapframe
 * must be incremented by one instruction; otherwise the exception
 * return code will restart the "syscall" instruction and the system
 * call will repeat forever.
 *
 * Since none of the OS/161 system calls have more than 4 arguments,
 * there should be no need to fetch additional arguments from the
 * user-level stack.
 *
 * Watch out: if you make system calls that have 64-bit quantities as
 * arguments, they will get passed in pairs of registers, and not
 * necessarily in the way you expect. We recommend you don't do it.
 * (In fact, we recommend you don't use 64-bit quantities at all. See
 * arch/mips/include/types.h.)
 */

//called from arch/mips/mips/trap.c's mips_trap function using mips_syscall(tf) to handle system call. so go to appropriate handler depending on system call

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void
mips_syscall(struct trapframe *tf) //trapframe definition in trapframe.h
{
	
	int callno;
	int32_t retval;
	int err = 0;

	assert(curspl==0);

	callno = tf->tf_v0;

	//added in 
	int fork_return;

	/*
	 * Initialize retval to 0. Many of the system calls don't
	 * really return a value, just 0 for success and -1 on
	 * error. Since retval is the value returned on success,
	 * initialize it to 0 by default; thus it's not necessary to
	 * deal with it except for calls that return other values, 
	 * like write.
	 */
	retval = 0;

	
	//call no.s in os161/kern/include/kern/callno.h
	switch (callno) { //tf contains execution state of parent
	    case SYS_reboot:
		err = sys_reboot(tf->tf_a0);
		break;

	    /* Add stuff here */

	//system calls such as sys_read, sys_write in userprog directory
	case SYS_write://fix
		err = sys_write(tf->tf_a0,tf->tf_a1,tf->tf_a2);	
 		break;
 	
 	case SYS_read://fix
 		err = sys_read(tf->tf_a0,tf->tf_a1,tf->tf_a2);	
	    break;
	
	//system calls such as sys_fork, sys_getpid, sys_waitpid in this file - syscall.c
	case SYS_fork:
 		fork_return = sys_fork(tf,&retval);
 		if(fork_return < 0)
 			err = 1;
 		else
 			err = 0;
	    break;
	    
	case SYS_getpid://according to man file, get pid does not fail so no retval
		retval = sys_getpid();
		break;
		
	case SYS__exit:// sys__exit has no return value
		sys__exit(tf->tf_a0);
		break;
		
	    default:
		kprintf("Unknown syscall %d\n", callno);
		err = ENOSYS;
		break;
	}

	//a3 like a flag of 0 or 1 where 1 means an error - can see os161/lib/libc/syscalls-mips.S
	
	if (err) {
		/*
		 * Return the error code. This gets converted at
		 * userlevel to a return value of -1 and the error
		 * code in errno.
		 */

		tf->tf_v0 = retval;
		tf->tf_a3 = 1;      /* signal an error */
	}
	else {
		/* Success. */		
		tf->tf_v0 = retval;
		tf->tf_a3 = 0;      /* signal no error */ 
	}
	
	/*
	 * Now, advance the program counter, to avoid restarting
	 * the syscall over and over again.
	 */
	
	tf->tf_epc += 4;

	/* Make sure the syscall code didn't forget to lower spl */
	assert(curspl==0);

}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int sys_fork(struct trapframe *tf, int* returnval)
{
	//need to be dynamocally allcoated because thread fork need this child frame and if parent finishes
	//before child, this varioable would be lost
	
	struct trapframe *child_tf;
	child_tf  = (struct trapframe*) kmalloc(sizeof(struct trapframe));
	if(child_tf == NULL)
	{
		kprintf("Error: Not enough memory to allocate\n"); //USEFUL FOR TESTING, KEEP LATER
		*returnval = ENOMEM;
		return -1;
	}
	
	*child_tf = *tf; //to copy trapframe contents from parent to child
	
	//curthread in os61/kern/thread/thread.c and t_vmspace is a struct of type addrspace. 
	//Addrspace in kern/include 
	 struct addrspace*  parent_addrspace = curthread->t_vmspace; 
	
	
	 struct addrspace*  child_addrspace;//address space for child
	

	 //as_copy prototype in os161/kern/include/addressspace.h and source code in os161/kern/vm/addrspace.c
	 //int as_copy(struct addrspace *src, struct addrspace **ret);
	int as_copy_return;
		
	as_copy_return = as_copy(parent_addrspace,&child_addrspace);//child gets new address space and will have same contents of parent's address space. thread not 
															//made yet, just have contents
											
	if(as_copy_return != 0)//as_copy returns either 0 or ENOMEM
	{
		kprintf("Error in copying parent's contents onto child\n"); //USEFUL FOR TESTING, KEEP LATER
		*returnval = as_copy_return;
		return -1;	
	}
	
        //dont know if needed
        as_activate(curthread->t_vmspace);
        
        //int thread_fork(const char *name, void *data1, unsigned long data2, void (*func)(void *, unsigned long), struct thread **ret)
	//thread_fork in os161/kern/thread.c
	
	int thread_fork_return;
        
      	struct thread* new_child_thread; //new thread which will point to new child thread after thread_fork
      	
      	//int thread_fork(const char *name, void *data1, unsigned long data2, void (*func)(void *, unsigned long), struct thread **ret)	
	thread_fork_return = thread_fork(curthread->t_name, child_tf,  (unsigned long ) child_addrspace, md_forkentry, &new_child_thread);
	
	if(thread_fork_return !=0)
	{
		kprintf("Error: thread_fork did not work\n"); //USEFUL FOR TESTING, KEEP LATER
		*returnval = thread_fork_return;
		return -1;
	}
		
	//kprintf("syscall.c: I am parent having pid %d and my childpid is %d\n",(int) sys_getpid(),new_child_thread->thread_pid);//VERY USEFUL FOR TESTING FORK for parent
	
	*returnval = new_child_thread-> thread_pid;	//for parent, set returnval to pid of child
	return 0;
		
}


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int md_forkentry(struct trapframe * child_tf, unsigned long converted_ptr_child_addrspace)
{
	/*
	 * This function is provided as a reminder. You need to write
	 * both it and the code that calls it.
	 *
	 * Thus, you can trash it and do things another way if you prefer.
	 */
	 
	// kprintf("Entering md_forkentry for the %dth time\n", md_fork_entry); //USEFUL FOR TESTING, KEEP LATER
	 md_fork_entry++;
	 	 
	 child_tf->tf_v0 = 0;	//return value is 0 since in child thread
	 child_tf->tf_a3 = 0;	//a3 zero if system call successful
	 child_tf->tf_epc += 4; // increment to next  instruction for child
	 
	 //return value in v0 which is checked by user program. If v0 is zero then retuned to chiil process, and v0 is pid of child  if t is returned to parent. 
	 	 
	 //current child thread's vmspace now points to allocated child_addrspace that was done before and sent as unsigned long
	 curthread->t_vmspace = (struct addrspace *)converted_ptr_child_addrspace;
	 
	 as_activate(curthread->t_vmspace);//void as_activate(struct addrspace *) in os161/kern/include/addrspace.h
	 
	 //copy from kernel heap to stack
	 struct trapframe local_child_frame =  *child_tf;//local_chiild_frame will have contents of child trap frame which is child_tf points to
	 
	 kfree(child_tf);// free child as no longer need
	 
	// voidmips_usermode(struct trapframe *tf) in kern/arch/mips/mips/trap.c
	 mips_usermode(&local_child_frame);
	
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int sys_getpid(void)
{
	int pid =  curthread->thread_pid;
	return pid;
}

int sys_waitpid(pid_t pid, int *returncode, int flags)
{
	kprintf("\n\nusing waitpid\n\n");
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void sys__exit(int code)
{
	process_table[curthread->thread_pid].exited = 1; //set the exited flag for this process
	process_table[curthread->thread_pid].exit_code = code;//set the exit code for this process
<<<<<<< .mine
	//kprintf
	kprintf("in sys__exit function in syscall.c: Im exiting!");
	thread_exit();//not fully sure	
=======
	//kprintf("in sys__exit function in syscall.c: Im exiting!");//USEFUL FOR TESTING, KEEP LATER
	
	thread_exit();
>>>>>>> .r73
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


