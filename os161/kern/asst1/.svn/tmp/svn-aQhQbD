/*
 * catsem.c
 *
 * 30-1-2003 : GWA : Stub functions created for CS161 Asst1.
 *
 * NB: Please use SEMAPHORES to solve the cat syncronization problem in 
 * this file.
 */


/*
 * 
 * Includes
 *
 */
#include <types.h>
#include <lib.h>
#include <test.h>
#include <thread.h>
#include <synch.h>
#include <curthread.h>
#include <machine/spl.h>

/*
 * 
 * Constants
 *
 */

/*
 * Number of food bowls.
 */

#define NFOODBOWLS 2

/*
 * Number of cats.
 */

#define NCATS 6

/*
 * Number of mice.
 */

#define NMICE 2

/* bowl number: 1 or 2*/
int bowl;

//0 means vacant, 1 means occupied
int bowl1_status = 0;
int bowl2_status = 0;



/*cat iteration numbers*/
int cat0_iteration = 0;
int cat1_iteration = 0;
int cat2_iteration = 0;
int cat3_iteration = 0;
int cat4_iteration = 0;
int cat5_iteration = 0;


/*mouse iteration numbers*/
int mouse0_iteration = 0;
int mouse1_iteration = 0;


/*Semaphores*/

struct semaphore *prevent_eat;
struct semaphore *cat_sem;
struct semaphore *mouse_sem;
struct semaphore *bowl_sem;


/*Mouse, Cat count like in notes*/
int mouse_count = 0;
int cat_count = 0;


/*

 * 
 * Function Definitions
 * 
 */

/* who should be "cat" or "mouse" */

static void	//part of CRTICAL SECTION
sem_eat(const char *who, int num, int bowl, int iteration)	//num decides cat no., mouse no,
{
	
	
        kprintf("%s: %d starts eating: bowl %d, iteration %d\n", who, num, 
                bowl, iteration);
        clocksleep(1);
        kprintf("%s: %d ends eating: bowl %d, iteration %d\n", who, num, 
                bowl, iteration);
}

/*
 * catsem()
 *
 * Arguments:
 *      void * unusedpointer: currently unused.
 *      unsigned long catnumber: holds the cat identifier from 0 to NCATS - 1.
 *
 * Returns:
 *      nothing.
 *
 * Notes:
 *      Write and comment this function using semaphores.
 *
 */

static
void
catsem(void * unusedpointer, 
       unsigned long catnumber)	//added int iteration
{
        /*
         * Avoid unused variable warnings.
         */
         
       (void) unusedpointer;
       (void) catnumber;
       
       int iteration;
       
       if(catnumber == 0)
       {
       	iteration = cat0_iteration;
       }
       else if(catnumber == 1)
       {
       	iteration = cat1_iteration;
       }
       else if(catnumber == 2)
       {
       	iteration = cat2_iteration;
       }
       else if(catnumber == 3)
       {
       	iteration = cat3_iteration;
       }
       else if(catnumber == 4)
       {
       	iteration = cat4_iteration;
       }
       else if(catnumber == 5)
       {
       	iteration = cat5_iteration;
       }
       
     
        //critical section so semaphore
         P(prevent_eat);
         
	//sem_eat(const char *who, int num, int bowl, int iteration)
	sem_eat("cat",catnumber, bowl, iteration);
	iteration++;	//eaten so increment
	
	if(catnumber == 0)
       {
       	cat0_iteration = iteration;
       }
       else if(catnumber == 1)
       {
       	cat1_iteration = iteration;
       	}
       else if(catnumber == 2)
       {
       	cat2_iteration = iteration;
       	}
       else if(catnumber == 3)
       {
       	cat3_iteration = iteration;
       	}
       else if(catnumber == 4)
       {
       	cat4_iteration = iteration;
       	}
       else if(catnumber == 5)
       {
       	cat5_iteration = iteration;
       	}
	
      
	
	P(resources); // take a resource (bowl) right away if available!
	while (cats_iteration[catnumber] < 4){ //only continue if the cat has not eaten 4x
	
        //* Note: Spinlocks are for multiprocessors only.
		//while (status_bowl1 == 2 || status_bowl2 == 2){ //If a mouse is currently at a bowl, wait until completion.
			
			//WAIT - SPIN
		//}
		
		//Once we get here, we are NOT waiting anymore!
		
		if (status_bowl1 == 0 && status_bowl2 != 2){ // if bowl available and mouse is not at other bowl.
			//Change status of bowl 1 
			status_bowl1 = 1;
						
			//Time to eat!!
			sem_eat("cat", catnumber, 1, cats_iteration[catnumber]); 
			
			//Update bowl status now that we're done eating.
			status_bowl1 = 0;
			
			//iterate++, release resource.
			cats_iteration[catnumber] = cats_iteration[catnumber] + 1;
						
		
		}
		else if (status_bowl2 == 0 && status_bowl1 != 2) { //if bowl available and mouse is not at other bowl
			//Change status of bowl 2
			status_bowl2 = 1;
			
			//Time to eat!!
			sem_eat("cat", catnumber, 2, cats_iteration[catnumber]); 
			
			//Update bowl status now that we're done eating.
			status_bowl2 = 0;
			
			//iterate++, release resource.
			cats_iteration[catnumber] = cats_iteration[catnumber] + 1;
			
		}
		
		else{
		kprintf("Don't go here cats \n");
		}

	
	}
	
	V(resources);
	//Now that we are done, we should check if we need to kill the thread.
	if (cats_iteration[catnumber] >= 4){
	
	//kill thread here.
	
	}
}
        

/*
 * mousesem()
 *
 * Arguments:
 *      void * unusedpointer: currently unused.
 *      unsigned long mousenumber: holds the mouse identifier from 0 to 
 *              NMICE - 1.
 *
 * Returns:
 *      nothing.
 *
 * Notes:
 *      Write and comment this function using semaphores.
 *
 */

static
void
mousesem(void * unusedpointer, 
         unsigned long mousenumber)
{
        /*
         * Avoid unused variable warnings.
         */
	
        (void) unusedpointer;
        (void) mousenumber;
        
        int iteration;
       
       if(mousenumber == 0)
       {
       	iteration = mouse0_iteration;
       }
       else if(mousenumber == 1)
       {
       	iteration = mouse1_iteration;
       }
       
       
       
       P(mouse_sem);	//locks mouse count
       mouse_count = mouse_count + 1;
       
       //if(mouse_count == 1)	//2nd mouse doesnt enter 
       //{
       		
       V(mouse_sem);
       		
       P(prevent_eat);	//block everyone
       		
       	//critical section
       		
       //}
       
       //bowl status 0 or 1, bowl is 1 or 2
       
       if(bowl1_status == 0)//bowl 1 empty
       {
       		bowl = 1;
       		bowl1_status = 1;
       }	
      	else//bowl 2 empty
       	{		 
       		bowl = 2;
       		bowl2_status = 1;
       	}
	//V(mouse_sem);
 
       //sem_eat(const char *who, int num, int bowl, int iteration)
        sem_eat("mouse",mousenumber, bowl, iteration);
        
        if(bowl == 1)	//releases bowls after eating
        {
        	bowl1_status = 0;
        }
        else
        {
        	bowl2_status = 0;
        }
        
	iteration++;
	
	if(mousenumber == 0)
       {
       	mouse0_iteration = iteration;
       }
       else if(mousenumber == 1)
       {
       	mouse1_iteration = iteration;
       }
	
	//critical region done	
	
	P(mouse_sem);
	mouse_count = mouse_count - 1;
	V(mouse_sem);
	
	//if(mouse_count == 0)
	//{
	V(prevent_eat);
	//}
	//V(mouse_sem);
}
	V(resources);
	
	//Now that we are done, we should check if we need to kill the thread.
	if (mice_iteration[mousenumber] >= 4){
	
	//kill thread here.
	
	}
}


/*
 * catmousesem()
 *
 * Arguments:
 *      int nargs: unused.
 *      char ** args: unused.
 *
 * Returns:
 *      0 on success.
 *
 * Notes:
 *      Driver code to start up catsem() and mousesem() threads.  Change this 
 *      code as necessary for your solution.
 */

int
catmousesem(int nargs,		//coms here from menu.c, search 1a
            char ** args)
{
	
	//Initialize the semaphore.
	resources = sem_create("bowls", 2);
	
	

        int index, error;
   
        /*
         * Avoid unused variable warnings.
         */

        (void) nargs;
        (void) args;
   
   	prevent_eat = sem_create("prevent_eat",1);
	cat_sem = sem_create("cat_sem",1);
	mouse_sem = sem_create("mouse_sem",1);
	bowl_sem = sem_create ("bowl_sem",1);
   
        /*
         * Start NCATS catsem() threads.
         */
         
         /*my comment for thread fork in thread.h - Make a new thread, which will start executing at catsem.The "data" arguments (one 			pointer, one integer) are passed to the function. 
         
         
         int thread_fork(const char *name, void *data1, unsigned long data2, void (*func)(void *, unsigned long), struct thread **ret);
         
         */
        
        for (index = 0; index < 0; index++) { //< NCATS here
           
                error = thread_fork("catsem Thread", 
                                    NULL, 
                                    index, 
                                    catsem, 
                                    NULL	
                                    );
                
                /*
                 * panic() on error.
                 */

                if (error) {
                 
                        panic("catsem: thread_fork failed: %s\n", 
                              strerror(error)
                              );
                }
        }
        
        /*
         * Start NMICE mousesem() threads.
         */

        for (index = 0; index < NMICE; index++) {
   
                error = thread_fork("mousesem Thread", 
                                    NULL, 
                                    index, 
                                    mousesem, 
                                    NULL
                                    );
                
                /*
                 * panic() on error.
                 */

                if (error) {
         
                        panic("mousesem: thread_fork failed: %s\n", 
                              strerror(error)
                              );
                }
        }

        return 0;
}


/*
 * End of catsem.c
 */
