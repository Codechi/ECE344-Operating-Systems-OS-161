/*
 * catsem.c
 *
 * 30-1-2003 : GWA : Stub functions created for CS161 Asst1.
 *
 * NB: Please use SEMAPHORES to solve the cat syncronization problem in 
 * this file.
 */


/*
 * 
 * Includes
 *
 */

#include <types.h>
#include <lib.h>
#include <test.h>
#include <thread.h>
<<<<<<< .mine
#include <synch.h>
//#include <curthread.h>
//#include <machine/spl.h>
=======
>>>>>>> .r25


/*
 * 
 * Constants
 *
 */

/*
 * Number of food bowls.
 */

#define NFOODBOWLS 2

/*
 * Number of cats.
 */

#define NCATS 6

/*
 * Number of mice.
 */

#define NMICE 2


/*
 * 
 * Function Definitions
 * 
 */

/* who should be "cat" or "mouse" */
static void
sem_eat(const char *who, int num, int bowl, int iteration)
{
        kprintf("%s: %d starts eating: bowl %d, iteration %d\n", who, num, 
                bowl, iteration);
        clocksleep(1);
        kprintf("%s: %d ends eating: bowl %d, iteration %d\n", who, num, 
                bowl, iteration);
}

/*
 * catsem()
 *
 * Arguments:
 *      void * unusedpointer: currently unused.
 *      unsigned long catnumber: holds the cat identifier from 0 to NCATS - 1.
 *
 * Returns:
 *      nothing.
 *
 * Notes:
 *      Write and comment this function using semaphores.
 *
 */

static
void
catsem(void * unusedpointer, 
       unsigned long catnumber)
{
        /*
         * Avoid unused variable warnings.
         */

        (void) unusedpointer;
        (void) catnumber;
}
        

/*
 * mousesem()
 *
 * Arguments:
 *      void * unusedpointer: currently unused.
 *      unsigned long mousenumber: holds the mouse identifier from 0 to 
 *              NMICE - 1.
 *
 * Returns:
 *      nothing.
 *
 * Notes:
 *      Write and comment this function using semaphores.
 *
 */

static
void
mousesem(void * unusedpointer, 
         unsigned long mousenumber)
{
        /*
         * Avoid unused variable warnings.
         */

	
        (void) unusedpointer;
        (void) mousenumber;
<<<<<<< .mine
        
        P(mouse_sem);	//locks mouse count
        int iteration;
       
       if(mousenumber == 0)
       {
       	iteration = mouse0_iteration;
       }
       else if(mousenumber == 1)
       {
       	iteration = mouse1_iteration;
       }
       
    
       
      
          kprintf("bhahbhahbhah!!!!\n");
       mouse_count = mouse_count + 1;
       
       //if(mouse_count == 1)	//2nd mouse doesnt enter 
       //{
       		
       V(mouse_sem);
       		
       P(prevent_eat);	//block everyone
       		
       	//critical section
       		
       //}
       
       //bowl status 0 or 1, bowl is 1 or 2
       
       if(bowl1_status == 0)//bowl 1 empty
       {
       		bowl = 1;
       		bowl1_status = 1;
       }	
      	else//bowl 2 empty
       	{		 
       		bowl = 2;
       		bowl2_status = 1;
       	}
	//V(mouse_sem);
 
       //sem_eat(const char *who, int num, int bowl, int iteration)
        sem_eat("mouse",mousenumber, bowl, iteration);
        
        if(bowl == 1)	//releases bowls after eating
        {
        	bowl1_status = 0;
        }
        else
        {
        	bowl2_status = 0;
        }
        
	iteration++;
	
	if(mousenumber == 0)
       {
       	mouse0_iteration = iteration;
       }
       else if(mousenumber == 1)
       {
       	mouse1_iteration = iteration;
       }
	
	//critical region done	
	
	P(mouse_sem);
	mouse_count = mouse_count - 1;
	V(mouse_sem);
	
	//if(mouse_count == 0)
	//{
	V(prevent_eat);
	//}
	//V(mouse_sem);
=======
>>>>>>> .r25
}


/*
 * catmousesem()
 *
 * Arguments:
 *      int nargs: unused.
 *      char ** args: unused.
 *
 * Returns:
 *      0 on success.
 *
 * Notes:
 *      Driver code to start up catsem() and mousesem() threads.  Change this 
 *      code as necessary for your solution.
 */

int
catmousesem(int nargs,
            char ** args)
{

	prevent_eat = sem_create("prevent_eat",1);
	cat_sem = sem_create("cat_sem",1);
	mouse_sem = sem_create("mouse_sem",1);
	bowl_sem = sem_create ("bowl_sem",1);

        int index, error;
   
        /*
         * Avoid unused variable warnings.
         */

        (void) nargs;
        (void) args;
   
<<<<<<< .mine
   	
   
=======
>>>>>>> .r25
        /*
         * Start NCATS catsem() threads.
         */

        for (index = 0; index < NCATS; index++) {
           
                error = thread_fork("catsem Thread", 
                                    NULL, 
                                    index, 
                                    catsem, 
                                    NULL
                                    );
                
                /*
                 * panic() on error.
                 */

                if (error) {
                 
                        panic("catsem: thread_fork failed: %s\n", 
                              strerror(error)
                              );
                }
        }
        
        /*
         * Start NMICE mousesem() threads.
         */

        for (index = 0; index < NMICE; index++) {
   
                error = thread_fork("mousesem Thread", 
                                    NULL, 
                                    index, 
                                    mousesem, 
                                    NULL
                                    );
                
                /*
                 * panic() on error.
                 */

                if (error) {
         
                        panic("mousesem: thread_fork failed: %s\n", 
                              strerror(error)
                              );
                }
        }

        return 0;
}


/*
 * End of catsem.c
 */
